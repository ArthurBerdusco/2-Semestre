OrdenaÃ§Ã£o InsertionSort
---------------------------------------------
Numerico
-------------------------------------------

public class InsertionSort {

	private static final Integer TAMANHO_VETOR = 10000;
	
	public static void main(String[] args) throws IOException {
		System.out.println(InsertionSort.class +   - Ordenando aguarde...); 
		Integer valores[] = new Integer[TAMANHO_VETOR];
		
		Random random = new Random();
		
		for (int i=0;i=TAMANHO_VETOR-1;i++) 
			valores[i] = random.ints(1, TAMANHO_VETOR).findAny().getAsInt();
		
		gerarArquivo(valores, entrada);

		Instant start = Instant.now();
		
		for (int i = 0; i  valores.length; i++) {
			int j = i;
			int x = valores[j];
			while (j  0 && x  valores[j - 1]) {
				valores[j] = valores[j - 1];
				j--;
			}
			valores[j] = x;
		}
		
		Instant end = Instant.now();
		System.out.println(InsertionSort.class +  - ##### DuraÃ§Ã£o da ordenaÃ§Ã£o  + 
					Duration.between(start, end));
		
		gerarArquivo(valores, saida);
	}

	
	private static void gerarArquivo(Integer valores[], String suffix) throws IOException {
		System.out.println(InsertionSort.class +  - Gravando em um arquivo );
		Path bubbleSortDiretorio = Files.createDirectory(Paths.get(.insertionSortDiretorio- + 
						suffix + - + UUID.randomUUID()));
		Path bubbleSortArquivo = Files.createFile(bubbleSortDiretorio.resolve(insertionSort- + 
						suffix + .txt));
		for (Integer valor  valores)
			Files.write(bubbleSortArquivo, (valor + rn).getBytes(StandardCharsets.ISO_8859_1), 
					StandardOpenOption.APPEND);
		System.out.println(InsertionSort.class +  - Arquivo gerado com sucesso );
	}	

}